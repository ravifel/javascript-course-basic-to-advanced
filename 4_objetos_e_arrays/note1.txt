OBJETOS E ARRAYS
- São 2 tipos de dados ou Estruturas de dados.
- Servem para guardar informações bastantes detalhadas de um item ou vários itens em uma variável só.
(Objetos) -> A programação Orientada a objetos é baseada em objetos
(Arrays) -> E as listas quandos muitos itens precisam ser adicionados em um lugar utilizamos os Arrays

---------------------------------------------
ARRAYS
- Possibilidade de adicionar um conjunto de valores a uma variável.
- O array deve ser escrito entre colchetes, separando os valores por vírgulas.

- É mais comum ter o mesmo tipo de dado dentro de um Array (Lista de nomes, Lista de busca, Lista de produtos, Lista de preços).
- Não tem restrições quanto ao tipo de dado.
- A contagem começa do zero. O primeiro indice é sempre o zero.

Para pegar o último elemento do array:
array(array.length - 1);

---------------------------------------------
PROPRIEDADES

- Propriedades são informações que podem ser verificadas de um valor.
- Quase todos os valores de JavaScript tem propriedades, menos  nulll e undefined.
- Podemos acessar as propriedades de duas maneiras.

---------------------------------------------
MÉTODOS

- Métodos são propriedades que funcionam como funções.
- Strings e arrays contém métodos.

INVOCANDO UMA PROPRIEDADE
string.propriedade;

INVOCANDO UM MÉTODO
string.metodo();

---------------------------------------------

OBJETOS
- Uma coleção de propriedades, parecidos com Arrays
- Podemos acessar estas propriedades passando cada propriedade passado o nome atrelado ao objeto.
- Traz o paradígma do POO (Programação Orientada a Objetos).

- É possível atribuir novas propriedades e deletar propriedades de um objeto que já foi inicializado;
> Exemplo: carro.tetoSolar = true;
> Exemplo: delete carro.portas;


COPIAR OBJETOS:
- É possível copiar todas as propriedades de um objeto para outro objeto.
- Com o método "assign" torna possivel a copia dos objetos. (Um objeto herda todas as propriedades de outro objeto).

MÉTODO KEYS (OBJECT)
- Também podemos verificar quais as chaves cada objeto possui.
- É importante para fazer uma tratativa no programa.

MUTAÇÃO (MUTABILITY)
- Um objeto pode herdar todas as caracteristicas do outro, virando uma referência ao mesmo;
- Criar um objeto novo com todas as caracteristicas de um outro objeto;
- Criar um objeto igual o outro e ainda referenciando ao antigo;
- Posso fazer mudanças em um objeto a partir do primeiro e vice e versa. (Mutabilidade)

LOOPS EM ARRAYS
- Uma técnica muito utilizada na programação é o loop nos arrays;
- Como é uma lista com muitos valores, muitas vezes precisamos ver/exibir cada um deles;

---------------------------------------------

MÉTODOS DE ARRAY: PUSH e POP
- Utilizar métodos de arrays que já foram criados previamente no JavaScript.
- (push) Serve para inserir um elemento no final do array.
- (pop) Serve para remover um elemento no final do array.
pessoas.push("PessoaTeste");
pessoas.pop();

MÉTODOS DE ARRAY: SHIFT e UNSHIFT
- (shift) Remove o primeiro elemento de um array.
- (unshift) Adiciona um ou mais elementos no inicio de um array.

--> Adicionam elementos em um Array: PUSH, UNSHIFT (Final, Inicio)
--> Removem elementos em um Array: POP, SHIFT (Final, Inicio)

MÉTODOS DE ARRAY: INDEXOFe LASTINDEXOF
- (indexOf) encontra o índice de um determinado elemento;
- (lastIndexOf) encontrar o último indice de um elemento;
- Servem para ver qual o indice de determinado elemento na primeira vez que ele viu esse elemento no Array ou na última vez que esse elemento foi visto.

MÉTODOS DE ARRAY: SLICE
- Retorna um array a partir de outro array;
- O array retornado é determinado pelos parâmetros que são os índices de início e fim do novo array;
- Pode ser utilizado para pegar algum elemento de um array ou até uma parte dele e colocar em outra variável.
- O 2° parametro passado no SLICE é para determinar até qual elemento vai ocorrer a ação, parando no elemento anteriro ao que foi passado no 2º parametro.
- Caso o 2º parametro for omitido, o SLICE irá ocorrer até o último elemento do array.

MÉTODOS DE ARRAY: FOREACH
- Itera cada elemento do array e vai criar uma lógica.

MÉTODOS DE ARRAY: INCLUDES
- Verifica se o array tem um determinado elemento;
- É possível criar uma lógica a partir disso;

MÉTODOS DE ARRAY: REVERSE
- Inverte um array.
- Deve ser retornado um novo Array invertido.

---------------------------------------------

MÉTODOS DE STRING: TRIM
- Remove tudo que não é "String" de uma string;
- Usando ele em uma frase, irá ser cortado até os espaços entre as palavras;

MÉTODOS DE STRING: PADSTART
- Inserir caracteres antes da string;
- Adicionar algum caractere várias vezes antes da string;

MÉTODOS DE STRING: SPLIT
- Divive uma String em um Array;
- Divide por um separador e retorna um Array;
- É necessário passar um argumento como separador;

MÉTODOS DE STRING: JOIN
- É o processo contrário do método SPLIT.
- Junta elementos em um array em uma frase, por meio de um separador;
- É útil para tratar no backend;

MÉTODOS DE STRING: REPEAT
- Repete uma string de acordo com o parâmetro "number", que é o número de vezes que a repetição vai acontecer.
- Útil para usar ao invés de Loops caso não seja necessário um Loop.

---------------------------------------------

REST OPERATOR
- Uma forma de uma função receber indefinidos parâmetros. Podendo receber um números de parâmetros diferentes como por exemplo 100 parâmetros ou 1000 parâmetros;
- O operador rest vai transformar os parâmetros em um array;
- O parâmetro é definido por: <...nomeDoParametro>;

DESTRUCTURING COM OBJETOS
- Podemos definir variáveis com propriedades do objeto com uma notação diferente, chamada destructuring;
- const {'coloca-se as propriedades aqui', 'chave, valor'} = <nomeObjeto>;
- Exemplo: 'nome: fnome'

DESTRUCTURING COM ARRAYS
- Podemos definir variáveis com valores do array com o destructuring;
- let ['coloca-se os valores aqui'] = <nomeDoArray>;

JSON
- JSON = JavaScript Object Notation;
- Utilizado para comunicação entre serviços. Exemplo: Backend e Frontend;
- Basicamente um tipo de dado padronizado, que lembra muito os objetos do JavaScript;
- Usado para comunicação com Api e receber dados via Api;
- É uma padronização de tipo de dados para a comunicação entre os serviços (É muito utilizado);
- É similar ao Objeto porém não possui metódos, apenas dados;
- Serve para o envio e recebimento de dados;

- Rigoroso na estrutura, ou seja, você deve seguir o padrão imposto por este formato;
- Apenas aspas duplas;
- Não aceita comentários;

JSON PARA STRING
- Podemos converter um JSON para uma String de forma fácil: JSON.stringify(car)
- Ou também podemos converter uma String para um JSON: JSON.parse(jsonToString);
